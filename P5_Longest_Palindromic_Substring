char* longestPalindrome(char* s) {
    int len = strlen(s);
    if (len < 1) {
        return s;
    }
    int maxLen = 1;
    int start = 0;
    for (int i = 1; i < len; i++) {
        // abba
        if (s[i] == s[i - 1]) {
            int j = 1;
            while(i+j < len && i > j && s[i+j] == s[i-1-j]){
                j++;
            }
            if (j*2 > maxLen) {
                maxLen = j*2;
                start = i - j;
            }
        }
        // aba
        if (s[i - 1] == s[i + 1]) {
            int j = 2;
            while(i+j < len && i - j >= 0 && s[i+j] == s[i-j]){
                j++;
            }
            j = j - 1;
            if (j*2 + 1 > maxLen) {
                maxLen = j*2 + 1;
                start = i - j;
            }
        }
        // the max
        if (maxLen >= len) {
            break;
        }
    }
    // maxLen + 1 for the end of string '\0'
    char * ret = (char *)calloc(sizeof(char), maxLen + 1);
    memcpy(ret, s+start, maxLen);
    return ret;
}
