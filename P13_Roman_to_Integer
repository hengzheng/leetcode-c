int romanToInt(char* s) {
    int num = 0;
    while(*s != '\0')
    {
        switch(*s) {
            case 'I' :
                if  (*(s+1) != '\0' && (*(s+1) == 'V' || *(s+1) == 'X'))
                {
                    if  (*(s+1) == 'V') {
                        num = num + 4;
                    }
                    else {
                        num = num + 9;
                    }
                    s = s + 2;
                }
                else {
                    num = num + 1;
                    s = s + 1;
                }
                break;
            case 'V' :
                num = num + 5;
                s = s + 1;
                break;
            case 'X' :
                if  (*(s+1) != '\0' && (*(s+1) == 'L' || *(s+1) == 'C'))
                {
                    if  (*(s+1) == 'L') {
                        num = num + 40;
                    }
                    else {
                        num = num + 90;
                    }
                    s = s + 2;
                }
                else {
                    num = num + 10;
                    s = s + 1;
                }
                break;
            case 'L' :
                num = num + 50;
                s = s + 1;
                break;
            case 'C' :
                if  (*(s+1) != '\0' && (*(s+1) == 'D' || *(s+1) == 'M'))
                {
                    if  (*(s+1) == 'D') {
                        num = num + 400;
                    }
                    else {
                        num = num + 900;
                    }
                    s = s + 2;
                }
                else {
                    num = num + 100;
                    s = s + 1;
                }
                break;
            case 'D' :
                num = num + 500;
                s = s + 1;
                break;
            case 'M' :
                num = num + 1000;
                s = s + 1;
                break;
            default :
                return 0;
        }
    }
    return num;
}
